"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
var dotenv_1 = require("dotenv");
var ENV_ARRAY_SEPARATOR = '|';
function compact(array) {
    var resIndex = 0;
    var result = [];
    if (array == null) {
        return result;
    }
    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
        var value = array_1[_i];
        if (value) {
            result[resIndex++] = value;
        }
    }
    return result;
}
var toString = Object.prototype.toString;
function getTag(value) {
    if (value == null) {
        return value === undefined ? '[object Undefined]' : '[object Null]';
    }
    return toString.call(value);
}
function isString(value) {
    var type = typeof value;
    return (type == 'string' ||
        (type == 'object' && value != null && !Array.isArray(value) && getTag(value) == '[object String]'));
}
__export(require("dotenv"));
exports.config = function (options) {
    if (options === void 0) { options = { separator: ENV_ARRAY_SEPARATOR }; }
    var separator = options.separator, params = __rest(options, ["separator"]);
    var result = dotenv_1.config(__assign({}, params));
    process.env = Object.keys(process.env).reduce(function (result, key) {
        var _a;
        var data = process.env[key];
        var safeJsonParse = function (data) {
            try {
                return JSON.parse(data);
            }
            catch (e) {
                return data;
            }
        };
        var dataParseIfObject = safeJsonParse(data);
        var dataParseIfInteger = isString(data) && data.match(/^-{0,1}\d+$/) ? Number(data) : dataParseIfObject;
        var dataParseIfBoolean = data === 'true' || data === 'false' ? data === 'true' : dataParseIfInteger;
        var dataJson = isString(data) && data.indexOf(separator) >= 0 ? compact(data.split(separator)) : dataParseIfBoolean;
        return __assign({}, result, (_a = {}, _a[key] = dataJson, _a));
    }, {});
    return result;
};
